<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<p>git config core.ignorecase false，关闭git忽略大小写配置，即可检测到大小写名称更改<br>git diff –name-only 2ef1bdc 34er24er</p><p>git init                                                  # 初始化本地git仓库（创建新仓库）<br>git config –global user.name “xxx”                       # 配置用户名<br>git config –global user.email “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“              # 配置邮件<br>git config –global color.ui true                         # git status等命令自动着色<br>git config –global color.status auto<br>git config –global color.diff auto<br>git config –global color.branch auto<br>git config –global color.interactive auto<br>git config –global –unset http.proxy                    # remove  proxy configuration on git<br>git clone git+ssh:<a href="mailto://git@192.168.53.168" target="_blank" rel="noopener">//git@192.168.53.168</a>/VT.git             # clone远程仓库<br>git status                                                # 查看当前版本状态（是否修改）<br>git add xyz                                               # 添加xyz文件至index<br>git add .                                                 # 增加当前子目录下所有更改过的文件至index<br>git commit -m ‘xxx’                                       # 提交<br>git commit –amend -m ‘xxx’                               # 合并上一次提交（用于反复修改）<br>git commit -am ‘xxx’                                      # 将add和commit合为一步<br>git rm xxx                                                # 删除index中的文件<br>git rm -r *                                               # 递归删除<br>git rm –cached [file/dir]                                # 删除索引。 包括正索引和负索引 （负即是 ignore）<br>git log                                                   # 显示提交日志<br>git log -1                                                # 显示1行日志 -n为n行<br>git log -5<br>git log –stat                                            # 显示提交日志及相关变动文件<br>git log -p -m<br>git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容<br>git show dfb02                                            # 可只用commitid的前几位<br>git show HEAD                                             # 显示HEAD提交日志<br>git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本<br>git show v2.0                                             # 显示v2.0的日志及详细内容<br>git show dev                                              # 显示 dev 分支最后一次 commit 细节<br>git show-branch                                           # 图示当前分支历史<br>git show-branch –all                                     # 图示所有分支历史<br>git show HEAD@{5}<br>git show master@{yesterday}                               # 显示master分支昨天的状态<br>git show HEAD~3<br>git show -s –pretty=raw 2be7fcb476<br>git show [commit]                                         # 显示某次提交的元数据和内容变化<br>git show –name-only [commit]                             # 显示某次提交发生变化的文件<br>git show [commit]:[filename]                              # 显示某次提交时，某个文件的内容</p><p>git tag                                                   # 显示已存在的tag<br>git tag -a v2.0 -m ‘xxx’                                  # 增加v2.0的tag</p><p>git log v2.0                                              # 显示v2.0的日志<br>git diff                                                  # 显示所有未添加至index的变更<br>git diff –cached                                         # 显示所有已添加index但还未commit的变更<br>git diff HEAD^                                            # 比较与上一个版本的差异<br>git diff HEAD – ./lib                                    # 比较与HEAD版本lib目录的差异<br>git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的<br>git diff origin/master..master –stat                     # 只显示差异的文件，不显示具体内容<br>git diff –name-status master..dev          #差异的文件和状态<br>git diff –name-only head~1             ＃差异的文件<br>git remote add origin git+ssh:<a href="mailto://git@192.168.53.168" target="_blank" rel="noopener">//git@192.168.53.168</a>/VT.git # 增加远程定义（用于push/pull/fetch）<br>git branch                                                # 显示本地分支<br>git branch –contains 50089                               # 显示包含提交50089的分支<br>git branch -a                                             # 显示所有分支<br>git branch -r                                             # 显示所有原创分支<br>git branch –merged                                       # 显示所有已合并到当前分支的分支<br>git branch –no-merged                                    # 显示所有未合并到当前分支的分支<br>git branch -m master master_copy                          # 本地分支改名<br>git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出<br>git checkout -b master master_copy                        # 上面的完整版<br>git checkout features/performance                         # 检出已存在的features/performance分支<br>git checkout –track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支<br>git checkout v2.0                                         # 检出版本v2.0<br>git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出<br>git checkout –track origin/daves_branch<br>Git checkout –orphan <branchname>          # 创建空白分支<br>git checkout – README                                    # 检出head版本的README文件（可用于修改错误回退）<br>git merge origin/master                                   # 合并远程master分支至当前分支<br>git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改<br>git push origin master                                    # 将当前分支push到远程master分支<br>git push origin dev:remote-dev          # 提交本地分支dev到远程，远程分支名为 remote-dev<br>git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支<br>git push origin –delete <branchname>                     # 删除远程分支<br>git push –tags                                           # 把所有tag推送到远程仓库<br>git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）<br>git fetch –prune                                         # 获取所有原创分支并清除服务器上已删掉的分支<br>git pull origin master                                    # 获取远程分支master并merge到当前分支<br>git mv README README2                                     # 重命名文件README为README2<br>git reset –hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）<br>git rebase<br>Git rebase origin/release/rt215           # 先  fetch ,  再 rebase 远程分支<br>git branch -d BJVEP933                           # 删除分支BJVEP933（本分支修改已合并到其他分支）<br>git branch -D BJVEP933                           # 强制删除分支BJVEP933<br>git ls-files                                              # 列出git index包含的文件</branchname></branchname></p><p>git whatchanged                                           # 显示提交历史对应的文件修改<br>git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818<br>git ls-tree HEAD                                          # 内部命令：显示某个git对象<br>git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH<br>git reflog                                                # 显示所有提交，包括孤立节点<br>git log –pretty=format:’%h %s’ –graph                   # 图示提交日志<br>git log –oneline –decorate –graph –all        # 图示提交分支日志</p><p>git stash                                                 # 暂存当前修改，将所有至为HEAD状态<br>git stash list                                            # 查看所有暂存<br>git stash show -p stash@{0}                               # 参考第一次暂存<br>git stash apply stash@{0}                                 # 应用第一次暂存<br>git grep “delete from”                                    # 文件中搜索文本“delete from”<br>git grep -e ‘#define’ –and -e SORT_DIRENT<br>git gc<br>git fsck</p><p>git log –stat                                            # 显示commit历史，以及每次commit发生变更的文件<br>git reflog                                                # 显示当前分支的最近几次提交<br>git log [tag] HEAD –pretty=format:%s                     # 显示某个commit之后的所有变动，每个commit占据一行<br>git log [tag] HEAD –grep feature                         # 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件<br>git log –follow [file] / git whatchanged [file]          # 显示某个文件的版本历史，包括文件改名<br>git log -p [file]                                         # 显示指定文件相关的每一次diff<br>git diff –cached [file]                                  # 显示暂存区和上一个commit的差异<br>git diff HEAD                                             # 显示工作区与当前分支最新commit之间的差异</p><p>git commit -v                                             # 提交时显示所有diff信息<br>git commit –amend -m [message]                           # 使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息<br>git commit –amend [file1] [file2] …                    # 重做上一次commit，并包括指定文件的新变化<br>git checkout [commit] [file]                              # 恢复某个commit的指定文件到暂存区和工作区<br>git checkout .                                            # 恢复暂存区的所有文件到工作区<br>git reset [file]                                          # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>git reset –hard                                          # 重置暂存区与工作区，与上一次commit保持一致<br>git reset [commit]                                        # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>git reset –hard [commit]                                 # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>git reset –keep [commit]                                 # 重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>git revert [commit]                                       # 新建一个commit，用来撤销指定commit  后者的所有变化都将被前者抵消，并且应用到当前分支<br>git archive -o latest.zip HEAD/master/hash<br>git archive mast &gt; project.zip<br>git archive batch –format=tar  -o web.tar</p><ol><li>git branch -avv -vv 能显示当前本地 branch 对应的 origin branch，以及最后一次提交的信息。 -a 为显示所有的branch，包括本地branch以及远程branch。 一起组合的时候，能让你清晰的了解当前所有的branch信息。 </li><li>git remote show origin 显示 origin 的详细信息，包括了branch track 的信息。 </li><li>git push -u /–set-upstream 首次push的时候，会设置自动将远程branch作为默认的 push branch,但并不会作为默认的pull branch，所以直接输入 git pull 的时候，会有出错提示。 那么，可以在再次push的时候，加上-u 或者–set-upstream，则会将默认的push branch同时设置为pull branch，这样，该remote branch就成为了 tracking branch，之后就可以直接输入 git pull 来更新本地branch了。 </li><li>get pull –rebase      git pull将远程branch更新到本地，如果远程branch有更新，则会和当前branch做merge。一般来说merge并产生不友好的commit信息，当你再次push到git服务器上之后，会给其他的合作开发人员带来极为麻烦的合并。–rebase则会在git pull 之后以远程分支为基本来应用本地的更新，生成的更新记录则会更友好。 </li><li>git rebase –onto master server client 如果没有 –onto master，是将 client 以 server 为基准进行rebase，即将client对server的共同祖先的改动接到server的HEAD上，有了 –onto master，则是将这个改动接到 master的HEAD后面。在同时开发多个分支，并且在需要应用某些不是以 master 为基础创建的分支的时候，特别有用。 <br>Delete a Git branch both locally and in GitHub<br>Delete a remote branch: git push origin –delete <branchname><br>git push origin :<branchname><br>To remove a local branch from your machine:<br>git branch -d the_local_branch</branchname></branchname></li></ol><p>Push local branch to remote<br>why-do-i-need-to-do-set-upstream-all-the-time<br>git push -u origin <branchname><br>git push -u origin <branchname> = git push origin <branchname> + git branch –set-upstream-to origin/my_branch<br>git branch –set-upstream-to origin/my_branch = git branch -u origin/my_branch<br>Pull remote branch to local<br>git checkout -b <localname> origin/<remotename><br>Example: pull then merge into another branch<br>my local 2 brach: dev work my working branch : work then I need to pull some new code from dev then merge into branch work<br>on <strong>work</strong>: g stash<br>on <strong>work</strong>: gco dev<br>on <strong>dev</strong>: gl –rebase<br>on <strong>dev</strong>: gco work<br>on <strong>work</strong>: g rebase dev<br>on <strong>work</strong>: g stash pop<br>recover current changes<br>this recover current changes but do nothing with a commit git checkout -f<br>PS: git reset head~ will undo a head commit, but recover nothing.<br>add or edit a remote url<br>How to change a remote repository URI using Git?<br>via command:<br>add: git remote add origin ssh://newhost.com/usr/local/gitroot/myproject.git<br>set: git remote set-url origin ssh://newhost.com/usr/local/gitroot/newproject.git<br>Check your local repo-folder/.git/config file for:<br>[remote “origin”]<br>    fetch = +refs/heads/<em>:refs/remotes/origin/</em><br>    url = <a href="https://user:password@code.google.com/p/project-name/" target="_blank" rel="noopener">https://user:password@code.google.com/p/project-name/</a><br>git diff commit<br>git log<br>then find commit version string in such:<br>commit 48c47872e21283ec483b65a85cba7dac07dd60e0<br>Author: rup <a href="mailto:&#117;&#x67;&#108;&#x79;&#x73;&#x6f;&#117;&#108;&#64;&#102;&#x6f;&#x78;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;" target="_blank" rel="noopener">&#117;&#x67;&#108;&#x79;&#x73;&#x6f;&#117;&#108;&#64;&#102;&#x6f;&#x78;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a><br>Date:   Thu Jan 23 01:14:38 2014 +0800</remotename></localname></branchname></branchname></branchname></p><pre><code>update post</code></pre><p>then show target version with current HEAD:<br>git diff 48c47872e21283ec483b65a85cba7dac07dd60e0 HEAD<br>or previous version with previous’ previous version:<br>git diff HEAD~1 HEAD~2<br>or compare with commit string:<br>git diff 48c47872e21283ec483b65a85cba7dac07dd60e0 f28a263731d3bd492a839037cbca4f12afcfcef4<br>or<br>git diff HEAD~2 f28a263731d3bd492a839037cbca4f12afcfcef4<br>between branchs:<br>git diff master dev<br>public key always asking for password and keyphrase<br>eval <code>ssh-agent -s</code><br>ssh-add ~/.ssh/id_rsa<br>or put this code to .bashrc or .zshrc Working with SSH key passphrases</p><h1 id="Note-ssh-environment-should-not-be-used-as-it"><a href="#Note-ssh-environment-should-not-be-used-as-it" class="headerlink" title="Note: ~/.ssh/environment should not be used, as it"></a>Note: ~/.ssh/environment should not be used, as it</h1><h1 id="already-has-a-different-purpose-in-SSH"><a href="#already-has-a-different-purpose-in-SSH" class="headerlink" title="already has a different purpose in SSH."></a>already has a different purpose in SSH.</h1><p>env=~/.ssh/agent.env</p><h1 id="Note-Don’t-bother-checking-SSH-AGENT-PID-It’s-not-used"><a href="#Note-Don’t-bother-checking-SSH-AGENT-PID-It’s-not-used" class="headerlink" title="Note: Don’t bother checking SSH_AGENT_PID. It’s not used"></a>Note: Don’t bother checking SSH_AGENT_PID. It’s not used</h1><h1 id="by-SSH-itself-and-it-might-even-be-incorrect"><a href="#by-SSH-itself-and-it-might-even-be-incorrect" class="headerlink" title="by SSH itself, and it might even be incorrect"></a>by SSH itself, and it might even be incorrect</h1><h1 id="for-example-when-using-agent-forwarding-over-SSH"><a href="#for-example-when-using-agent-forwarding-over-SSH" class="headerlink" title="(for example, when using agent-forwarding over SSH)."></a>(for example, when using agent-forwarding over SSH).</h1><p>agent_is_running() {<br>    if [ “$SSH_AUTH_SOCK” ]; then</p><pre><code>    # ssh-add returns:    #   0 = agent running, has keys    #   1 = agent running, no keys    #   2 = agent not running    ssh-add -l &gt;/dev/null 2&gt;&amp;1 || [ $? -eq 1 ]else    falsefi</code></pre><p>}</p><p>agent_has_keys() {<br>    ssh-add -l &gt;/dev/null 2&gt;&amp;1<br>}</p><p>agent_load_env() {<br>    . “$env” &gt;/dev/null<br>}</p><p>agent_start() {<br>    (umask 077; ssh-agent &gt;”$env”)<br>    . “$env” &gt;/dev/null<br>}</p><p>if ! agent_is_running; then<br>    agent_load_env<br>fi</p><h1 id="if-your-keys-are-not-stored-in-ssh-id-rsa-pub-or-ssh-id-dsa-pub-you’ll-need"><a href="#if-your-keys-are-not-stored-in-ssh-id-rsa-pub-or-ssh-id-dsa-pub-you’ll-need" class="headerlink" title="if your keys are not stored in ~/.ssh/id_rsa.pub or ~/.ssh/id_dsa.pub, you’ll need"></a>if your keys are not stored in ~/.ssh/id_rsa.pub or ~/.ssh/id_dsa.pub, you’ll need</h1><h1 id="to-paste-the-proper-path-after-ssh-add"><a href="#to-paste-the-proper-path-after-ssh-add" class="headerlink" title="to paste the proper path after ssh-add"></a>to paste the proper path after ssh-add</h1><p>if ! agent_is_running; then<br>    agent_start<br>    ssh-add<br>elif ! agent_has_keys; then<br>    ssh-add<br>fi</p><p>unset env<br>deleting-a-git-commit<br>deleting-a-git-commit<br>way one:<br>git rebase –onto <branch name>~<first commit number to remove> <branch name>~<first commit to be kept> <branch name> <!--  --> e.g:</branch></first></branch></first></branch></p><p>git rebase –onto repair~3 repair~1 repair<br>git rebase -i HEAD~5<br>way two:<br>git checkout b3d92c5 Checkout the last usable commit.<br>git checkout -b repair Create a new branch to work on.<br>git cherry-pick 77b9b82 Run through commit 3.<br>git cherry-pick 2c6a45b Run through commit 1.<br>git checkout master Checkout master.<br>git reset –hard b3d92c5 Reset master to last usable commit.<br>git merge repair Merge our new branch onto master.<br>git push –hard origin master Push master to the remote repo.<br>Force Git to overwrite local files on pull<br>git fetch –all<br>git reset –hard origin/master</p><p>git show HEAD~4:src/main.c              see a revision of a file<br>zip modified-files.zip $(git ls-files –modified)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jsdoc</title>
      <link href="/jsdoc/"/>
      <url>/jsdoc/</url>
      
        <content type="html"><![CDATA[<h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is a function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; n - A string param</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125; A good string</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     foo('hello')</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> n &#125;</span><br></pre></td></tr></table></figure><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@param &#123;string=&#125; n  Optional</span><br><span class="line">@param &#123;string&#125; [n] Optional</span><br><span class="line">@param &#123;(string\|number)&#125; n Multiple types</span><br><span class="line">@param &#123;*&#125; n  Any type</span><br><span class="line">@param &#123;...string&#125; n  Repeatable <span class="built_in">arguments</span></span><br><span class="line">@param &#123;string&#125; [n=<span class="string">"hi"</span>]  Optional <span class="keyword">with</span> <span class="keyword">default</span></span><br><span class="line">@param &#123;string[]&#125; n <span class="built_in">Array</span> <span class="keyword">of</span> strings</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/vim/"/>
      <url>/vim/</url>
      
        <content type="html"><![CDATA[<p>131 G,  131 gg          定位到行<br>viwy/viwp           拷贝、覆盖粘贴一个单词<br>dw,  yw, cw, vw<br>vi(      di(    ci(    yi(</p><p>shift  +  ~                     toggle toUpperCase/lowerCase<br>U             upperCase<br>u             lowerCase<br>shift + j               join lines<br>tabn + 5,   5gt           switch to tab 5<br>df}, dt}            删除直到包括（不包括）”｝”<br>d$，D              delete to end of line<br>d0, d^              delete to beginning of line (character)<br>:1,.d             delete to beginning of file<br>:.,$d             delete to end of file<br>set buftype: “ “          E382: Cannot write, ‘buftype’ option is set<br>:so(urce) ~/.vimrc        设置立即生效<br>‘’              跳转到光标上次停靠的地方, 是两个’, 而不是一个”  </p><ul><li>在文件中向前搜索当前光标所在的单词 <h1 id="在文件中向后搜索当前光标所在的单词"><a href="#在文件中向后搜索当前光标所在的单词" class="headerlink" title="在文件中向后搜索当前光标所在的单词"></a>在文件中向后搜索当前光标所在的单词</h1></li></ul><p>10&gt;&gt;              10行往右移动<br>vat/vit             html dom tag 块<br>tabc              关闭 tab<br>noh/nohl            no high light</p><p>替换<br><a href="https://www.cnblogs.com/fakis/archive/2010/07/17/1976595.html" target="_blank" rel="noopener">https://www.cnblogs.com/fakis/archive/2010/07/17/1976595.html</a><br>:m,ns/str1/str2/g         将 m 行到 n 行中的字串 str1 全部替换为字串 str2。<br>:%s/str1/str2/g             全文替换<br>块操作:<br>Ctrl+v, 选中行，I（大写I）, #, ESC</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/nginx/"/>
      <url>/nginx/</url>
      
        <content type="html"><![CDATA[<p>nginx -c /etc/nginx/nginx.conf<br>Nginx -s stop<br>Nginx -s stop</p><p> if ($request_uri =~ ^/school/ ) {<br>       proxy_pass <a href="http://127.0.0.1:4301$request_uri" target="_blank" rel="noopener">http://127.0.0.1:4301$request_uri</a>;<br> }</p><p>检查语法<br>nginx -t</p><p>Qing Cloud</p><p>sudo service nginx restart<br>vim /etc/nginx/sites-enabled/coigre.com<br>/etc/init.d/nginx restart<br>fuser -k -n tcp 3000</p><p>7758991</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tmux</title>
      <link href="/tmux/"/>
      <url>/tmux/</url>
      
        <content type="html"><![CDATA[<p>tmux shortcuts &amp; cheatsheet<br>tmux            start new<br>tmux ls           list sessions<br>tmux new -s myname        start new with session name<br>tmux rename -t 0  byname<br>tmux a  #  (or at, or attach)     attach<br>tmux detach                     detach one<br>tmux a(ttach)                   attach one<br>tmux a -t myname        attach to named<br>tmux kill-session -t myname     kill<br>tmux ls | grep : | cut -d. -f1 | awk ‘{print substr($1, 0, length($1)-1)}’ | xargs kill     kill all<br>tmux source-file ~/.tmux.conf                           source conf<br>Sessions<br>s  list sessions<br>$  name session<br>d  detach<br>t  big clock<br>?  list shortcuts<br>:  prompt<br>Windows (tabs)<br>d  dettach window<br>c  new window<br>w  list windows<br>f  find window<br>,  name window<br>&amp;  kill window<br>  (num 0,1,2,3 etc.) switch window<br>Panes<br>%  vertical split<br>“  horizontal split<br>o  swap panes<br>q  show pane numbers<br>x  kill pane</p><ul><li>break pane into window (e.g. to select text by mouse to copy)</li></ul><ul><li>restore pane from window<br>⍽  space - toggle between layouts<br><prefix> q (Show pane numbers, when the numbers show up type the key to goto that pane)<br><prefix> { (Move the current pane left)<br><prefix> } (Move the current pane right)<br><prefix> z toggle pane zoom</prefix></prefix></prefix></prefix></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>status code</title>
      <link href="/status%20code/"/>
      <url>/status%20code/</url>
      
        <content type="html"><![CDATA[<p>Status Code</p><p><a href="https://httpstatuses.com/" target="_blank" rel="noopener">https://httpstatuses.com/</a></p><ul><li>1×× Informational </li><li>100 Continue</li><li>101 Switching Protocols</li><li>102 Processing</li><li>2×× Success </li><li>200 OK</li><li>201 Created</li><li>202 Accepted</li><li>203 Non-authoritative Information</li><li>204 No Content</li><li>205 Reset Content</li><li>206 Partial Content</li><li>207 Multi-Status</li><li>208 Already Reported</li><li>226 IM Used</li><li>3×× Redirection </li><li>300 Multiple Choices</li><li>301 Moved Permanently</li><li>302 Found</li><li>303 See Other</li><li>304 Not Modified</li><li>305 Use Proxy</li><li>307 Temporary Redirect</li><li>308 Permanent Redirect</li><li>4×× Client Error </li><li>400 Bad Request</li><li>401 Unauthorized</li><li>402 Payment Required</li><li>403 Forbidden</li><li>404 Not Found</li><li>405 Method Not Allowed</li><li>406 Not Acceptable</li><li>407 Proxy Authentication Required</li><li>408 Request Timeout</li><li>409 Conflict</li><li>410 Gone</li><li>411 Length Required</li><li>412 Precondition Failed</li><li>413 Payload Too Large</li><li>414 Request-URI Too Long</li><li>415 Unsupported Media Type</li><li>416 Requested Range Not Satisfiable</li><li>417 Expectation Failed</li><li>418 I’m a teapot</li><li>421 Misdirected Request</li><li>422 Unprocessable Entity</li><li>423 Locked</li><li>424 Failed Dependency</li><li>426 Upgrade Required</li><li>428 Precondition Required</li><li>429 Too Many Requests</li><li>431 Request Header Fields Too Large</li><li>444 Connection Closed Without Response</li><li>451 Unavailable For Legal Reasons</li><li>499 Client Closed Request</li><li>5×× Server Error </li><li>500 Internal Server Error</li><li>501 Not Implemented</li><li>502 Bad Gateway</li><li>503 Service Unavailable</li><li>504 Gateway Timeout</li><li>505 HTTP Version Not Supported</li><li>506 Variant Also Negotiates</li><li>507 Insufficient Storage</li><li>508 Loop Detected</li><li>510 Not Extended</li><li>511 Network Authentication Required</li><li>599 Network Connect Timeout Error</li></ul><p>2开头 （请求成功）表示成功处理了请求的状态代码。<br>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。  201   （已创建）  请求成功并且服务器创建了新的资源。  202   （已接受）  服务器已接受请求，但尚未处理。  203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。  204   （无内容）  服务器成功处理了请求，但没有返回任何内容。  205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。 206   （部分内容）  服务器成功处理了部分 GET 请求。</p><p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。<br>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。  301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。  305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。  307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。<br>400   （错误请求） 服务器不理解请求的语法。  401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。  403   （禁止） 服务器拒绝请求。 404   （未找到） 服务器找不到请求的网页。 405   （方法禁用） 禁用请求中指定的方法。  406   （不接受） 无法使用请求的内容特性响应请求的网页。  407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 408   （请求超时）  服务器等候请求时发生超时。  409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。  410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。  411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。  412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。  413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。  414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。  415   （不支持的媒体类型） 请求的格式不受请求页面的支持。  416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。  417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p><p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。<br>500   （服务器内部错误）  服务器遇到错误，无法完成请求。  501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。  502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。  503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。  504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。  505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p><p>  </p><p>1xx - 信息提示 这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个 1xx 响应。<br>· 100 - Continue 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）  · 101 - Switching Protocols 服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）<br>2xx - 成功 这类状态代码表明服务器成功地接受了客户端请求。<br>· 200 - OK 一切正常，对GET和POST请求的应答文档跟在后面。  · 201 - Created 服务器已经创建了文档，Location头给出了它的URL。  · 202 - Accepted 已经接受请求，但处理尚未完成。  · 203 - Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝，非权威性信息（HTTP 1.1新）。 · 204 - No Content 没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。  · 205 - Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。  · 206 - Partial Content 客户发送了一个带有Range头的GET请求（分块请求），服务器完成了它（HTTP 1.1新）。<br>3xx - 重定向 客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。<br>· 300 - Multiple Choices 客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。  · 301 - Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。  · 302 - Found 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能<br>够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使 用。例如，如果浏览器错误地请求 <a href="http://host/~user" target="_blank" rel="noopener">http://host/~user</a> （缺少了后面的斜杠）<br>，有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。  · 303 - See Other 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。  · 304 - Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的<br>文档还可以继续使用。 · 305 - Use Proxy 客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。  · 307 - Temporary Redirect 和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时 才能重<br>定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随<br>对GET请求的重定向。（HTTP 1.1新）<br>4xx - 客户端错误 发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。<br>· 400 - Bad Request 请求出现语法错误。  · 401 - Unauthorized 访问被拒绝，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在 填写合<br>适的Authorization头后再次发出请求。IIS 定义了许多不同的 401 错误，它们指明更为具体的错误原因。这些具体的错误代码在浏览器中显示，但不在 IIS 日志中显示： · 401.1 - 登录失败。 · 401.2 - 服务器配置导致登录失败。 · 401.3 - 由于 ACL 对资源的限制而未获得授权。 · 401.4 - 筛选器授权失败。 · 401.5 - ISAPI/CGI 应用程序授权失败。 · 401.7 – 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。 · 403 - Forbidden 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。禁止访问：IIS 定义了许多不同的 403 错误，它们指<br>明更为具体的错误原因： · 403.1 - 执行访问被禁止。 · 403.2 - 读访问被禁止。 · 403.3 - 写访问被禁止。 · 403.4 - 要求 SSL。 · 403.5 - 要求 SSL 128。 · 403.6 - IP 地址被拒绝。 · 403.7 - 要求客户端证书。 · 403.8 - 站点访问被拒绝。 · 403.9 - 用户数过多。 · 403.10 - 配置无效。 · 403.11 - 密码更改。 · 403.12 - 拒绝访问映射表。 · 403.13 - 客户端证书被吊销。 · 403.14 - 拒绝目录列表。 · 403.15 - 超出客户端访问许可。 · 403.16 - 客户端证书不受信任或无效。 · 403.17 - 客户端证书已过期或尚未生效。 · 403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。 · 403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。 · 403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。 · 404 - Not Found 无法找到指定位置的资源。这也是一个常用的应答。  · 404.0 -（无） – 没有找到文件或目录。 · 404.1 - 无法在所请求的端口上访问 Web 站点。 · 404.2 - Web 服务扩展锁定策略阻止本请求。 · 404.3 - MIME 映射策略阻止本请求。 · 405 - Method Not Allowed 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用，用来访问本页面的 HTTP 谓词不被允许（方法不被允许）（HTTP 1.1<br>新）  · 406 - Not Acceptable 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容，客户端浏览器不接受所请求页面的 MIME 类型（HTTP 1.1新）。  · 407 - Proxy Authentication Required 要求进行代理身份验证，类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）  · 408 - Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新） · 409 - Conflict 通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）  · 410 - Gone 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的<br>原因文档不可用。（HTTP 1.1新）  · 411 - Length Required 服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）  · 412 - Precondition Failed 请求头中指定的一些前提条件失败（HTTP 1.1新）。 · 413 – Request Entity Too Large 目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1<br>新）。  · 414 - Request URI Too Long URI太长（HTTP 1.1新）。  · 415 – 不支持的媒体类型。 · 416 – Requested Range Not Satisfiable 服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新） · 417 – 执行失败。 · 423 – 锁定的错误。<br>5xx - 服务器错误 服务器由于遇到错误而不能完成该请求。<br>· 500 - Internal Server Error 服务器遇到了意料不到的情况，不能完成客户的请求。  · 500.12 - 应用程序正忙于在 Web 服务器上重新启动。 · 500.13 - Web 服务器太忙。 · 500.15 - 不允许直接请求 Global.asa。 · 500.16 – UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。 · 500.18 – URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。 · 500.100 - 内部 ASP 错误。 · 501 - Not Implemented 服务器不支持实现请求所需要的功能，页眉值指定了未实现的配置。例如，客户发出了一个服务器不支持的PUT请求。 · 502 - Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。 亦说Web 服务器用作网关或代理服务器时收到了无效响应<br>。 · 502.1 - CGI 应用程序超时。 · 502.2 - CGI 应用程序出错。 · 503 - Service Unavailable 服务不可用，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个<br>Retry-After头。这个错误代码为 IIS 6.0 所专用。 · 504 - Gateway Timeout 网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新） 。 · 505 - HTTP Version Not Supported 服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>curl</title>
      <link href="/curl/"/>
      <url>/curl/</url>
      
        <content type="html"><![CDATA[<p>cURL</p><p>-L, –location follow redirects</p><p>查看详细过程，可以看到返回 status code<br>-v, –verbose more output, indicates the direction  </p><p>-s, –silent don’t show a progress bar<br>-o, –output /dev/null don’t show received body</p><p>只显示返回请求头<br>-I, –only show http head</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
